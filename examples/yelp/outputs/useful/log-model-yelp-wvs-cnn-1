Model trained at 2016-03-04 22:26:13
Accuracy obtained: 0.804313099042
Error obtained: 0.195686900958
================================================================================
Model in json:
================================================================================
{"layers": [{"W_constraint": null, "activity_regularizer": null, "name": "Embedding", "custom_name": "embedding", "output_dim": 300, "trainable": false, "input_shape": [32386], "cache_enabled": true, "init": "uniform", "input_dim": 32386, "mask_zero": false, "W_regularizer": null, "dropout": 0.0, "input_length": 300}, {"input_length": null, "W_constraint": null, "b_constraint": null, "name": "Convolution1D", "custom_name": "convolution1d", "activity_regularizer": null, "trainable": true, "filter_length": 3, "cache_enabled": true, "init": "uniform", "nb_filter": 64, "input_dim": null, "subsample_length": 1, "b_regularizer": null, "W_regularizer": null, "activation": "linear", "border_mode": "valid"}, {"cache_enabled": true, "activation": "relu", "trainable": true, "name": "Activation", "custom_name": "activation"}, {"pool_length": 2, "name": "MaxPooling1D", "custom_name": "maxpooling1d", "stride": 2, "trainable": true, "cache_enabled": true, "border_mode": "valid"}, {"cache_enabled": true, "trainable": true, "name": "Dropout", "custom_name": "dropout", "p": 0.25}, {"input_length": null, "W_constraint": null, "b_constraint": null, "name": "Convolution1D", "custom_name": "convolution1d", "activity_regularizer": null, "trainable": true, "filter_length": 3, "cache_enabled": true, "init": "uniform", "nb_filter": 64, "input_dim": null, "subsample_length": 1, "b_regularizer": null, "W_regularizer": null, "activation": "linear", "border_mode": "valid"}, {"cache_enabled": true, "activation": "relu", "trainable": true, "name": "Activation", "custom_name": "activation"}, {"pool_length": 2, "name": "MaxPooling1D", "custom_name": "maxpooling1d", "stride": 2, "trainable": true, "cache_enabled": true, "border_mode": "valid"}, {"cache_enabled": true, "trainable": true, "name": "Dropout", "custom_name": "dropout", "p": 0.25}, {"cache_enabled": true, "trainable": true, "name": "Flatten", "custom_name": "flatten"}, {"W_constraint": null, "b_constraint": null, "name": "Dense", "custom_name": "dense", "activity_regularizer": null, "trainable": true, "cache_enabled": true, "init": "uniform", "activation": "linear", "input_dim": null, "b_regularizer": null, "W_regularizer": null, "output_dim": 1}, {"cache_enabled": true, "activation": "sigmoid", "trainable": true, "name": "Activation", "custom_name": "activation"}], "loss": "binary_crossentropy", "optimizer": {"beta_1": 0.8999999761581421, "epsilon": 1e-08, "beta_2": 0.9990000128746033, "lr": 0.0010000000474974513, "name": "Adam"}, "name": "Sequential", "class_mode": "binary", "sample_weight_mode": null}
================================================================================
Model summary:
================================================================================
--------------------------------------------------------------------------------
Initial input shape: (None, 32386)
--------------------------------------------------------------------------------
Layer (name)                  Output Shape                  Param #             
--------------------------------------------------------------------------------
Embedding (embedding)         (None, 300, 300)              9715800             
Convolution1D (convolution1d) (None, 298, 64)               57664               
Activation (activation)       (None, 298, 64)               0                   
MaxPooling1D (maxpooling1d)   (None, 149, 64)               0                   
Dropout (dropout)             (None, 149, 64)               0                   
Convolution1D (convolution1d) (None, 147, 64)               12352               
Activation (activation)       (None, 147, 64)               0                   
MaxPooling1D (maxpooling1d)   (None, 73, 64)                0                   
Dropout (dropout)             (None, 73, 64)                0                   
Flatten (flatten)             (None, 4672)                  0                   
Dense (dense)                 (None, 1)                     4673                
Activation (activation)       (None, 1)                     0                   
--------------------------------------------------------------------------------
Total params: 9790489
--------------------------------------------------------------------------------
================================================================================
Training history:
================================================================================
Epoch 1: loss: 0.451253, val_loss: 0.440795
Epoch 2: loss: 0.434692, val_loss: 0.434751
Epoch 3: loss: 0.427575, val_loss: 0.435917
Epoch 4: loss: 0.422190, val_loss: 0.431004
Epoch 5: loss: 0.417714, val_loss: 0.444488
Epoch 6: loss: 0.411971, val_loss: 0.432615
Epoch 7: loss: 0.405972, val_loss: 0.435816
Epoch 8: loss: 0.401560, val_loss: 0.444804
Epoch 9: loss: 0.398346, val_loss: 0.465102
Epoch 10: loss: 0.391830, val_loss: 0.454298
================================================================================
Code file:
================================================================================
import cPickle as pickle
from os.path import join as path_join
import sys

import numpy as np
from keras.layers.recurrent import GRU
from keras.models import Sequential
from keras.layers.core import Dense, Activation, Dropout, Flatten, Permute
from keras.layers import Embedding
from keras.layers.convolutional import Convolution1D, MaxPooling1D
from keras.optimizers import SGD

ROOT_PATH = '../..'
sys.path.append(ROOT_PATH)

from textclf.nn import train_neural

MODEL_FILE = './models/useful/yelp-model-yelp-wvs-cnn-1'
LOG_FILE = './outputs/useful/log-model-yelp-wvs-cnn-1'

## Where is the data
# train_reviews = np.load("../../Yelp_funny_train_fulltext_glove_300_X.npy")
# train_labels = np.load("../../Yelp_funny_train_fulltext_glove_300_y.npy")
# test_reviews = np.load("../../Yelp_funny_test_fulltext_glove_300_X.npy")
# test_labels = np.load("../../Yelp_funny_test_fulltext_glove_300_y.npy")

# train_reviews = np.load("../../Yelp_useful_train_fulltext_glove_300_X.npy")
# train_labels = np.load("../../Yelp_useful_train_fulltext_glove_300_y.npy")
# test_reviews = np.load("../../Yelp_useful_test_fulltext_glove_300_X.npy")
# test_labels = np.load("../../Yelp_useful_test_fulltext_glove_300_y.npy")

#train_reviews = np.load("../../Yelp_cool_train_fulltext_glove_300_X.npy")
#train_labels = np.load("../../Yelp_cool_train_fulltext_glove_300_y.npy")
#test_reviews = np.load("../../Yelp_cool_test_fulltext_glove_300_X.npy")
#test_labels = np.load("../../Yelp_cool_test_fulltext_glove_300_y.npy")

### Same with Yelp glove vectors

#train_reviews = np.load("../../Yelp_funny_train_fulltext_Yelp_glove_300_X.npy")
#train_labels = np.load("../../Yelp_funny_train_fulltext_Yelp_glove_300_y.npy")
#test_reviews = np.load("../../Yelp_funny_test_fulltext_Yelp_glove_300_X.npy")
#test_labels = np.load("../../Yelp_funny_test_fulltext_Yelp_glove_300_y.npy")

train_reviews = np.load("../../Yelp_useful_train_fulltext_Yelp_glove_300_X.npy")
train_labels = np.load("../../Yelp_useful_train_fulltext_Yelp_glove_300_y.npy")
test_reviews = np.load("../../Yelp_useful_test_fulltext_Yelp_glove_300_X.npy")
test_labels = np.load("../../Yelp_useful_test_fulltext_Yelp_glove_300_y.npy")

# train_reviews = np.load("../../Yelp_cool_train_fulltext_Yelp_glove_300_X.npy")
# train_labels = np.load("../../Yelp_cool_train_fulltext_Yelp_glove_300_y.npy")
# test_reviews = np.load("../../Yelp_cool_test_fulltext_Yelp_glove_300_X.npy")
# test_labels = np.load("../../Yelp_cool_test_fulltext_Yelp_glove_300_y.npy")

#WV_FILE_GLOBAL = path_join(ROOT_PATH, 'embeddings/wv/glove.42B.300d.120000-glovebox.pkl')
WV_FILE_GLOBAL = path_join(ROOT_PATH, 'embeddings/wv/Yelp-GloVe-300dim-glovebox.pkl')

gb_global = pickle.load(open(WV_FILE_GLOBAL, 'rb'))

wv_size = gb_global.W.shape[1]

model = Sequential()
emb = Embedding(gb_global.W.shape[0], wv_size, weights=[gb_global.W],
                    input_length=train_reviews.shape[1])
emb.trainable = False
model.add(emb)
model.add(Convolution1D(64, 3, init='uniform'))
model.add(Activation('relu'))
model.add(MaxPooling1D(2))
model.add(Dropout(0.25))

model.add(Convolution1D(64, 3, init='uniform'))
model.add(Activation('relu'))
model.add(MaxPooling1D(2))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(1, init='uniform'))
model.add(Activation('sigmoid'))

#sgd = SGD(lr=0.1, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='binary_crossentropy', optimizer="adam", class_mode="binary")

history = train_neural.train_sequential(model, train_reviews, train_labels, MODEL_FILE)
acc = train_neural.test_sequential(model, test_reviews, test_labels, MODEL_FILE)
train_neural.write_log(model, history, __file__, acc, LOG_FILE)

