Model trained at 2016-03-10 01:22:20
Accuracy obtained: 0.784662711492
Error obtained: 0.215337288508
================================================================================
Model in json:
================================================================================
{"layers": [{"W_constraint": null, "activity_regularizer": null, "name": "Embedding", "custom_name": "embedding", "output_dim": 300, "trainable": false, "input_shape": [120002], "cache_enabled": true, "init": "uniform", "input_dim": 120002, "mask_zero": false, "W_regularizer": null, "dropout": 0.0, "input_length": null}, {"U_regularizer": null, "name": "GRU", "custom_name": "gru", "inner_activation": "hard_sigmoid", "go_backwards": false, "output_dim": 128, "trainable": true, "stateful": false, "cache_enabled": true, "init": "glorot_uniform", "inner_init": "orthogonal", "dropout_U": 0.0, "dropout_W": 0.0, "input_dim": 300, "return_sequences": true, "b_regularizer": null, "W_regularizer": null, "activation": "tanh", "input_length": null}, {"cache_enabled": true, "trainable": true, "name": "Dropout", "custom_name": "dropout", "p": 0.5}, {"U_regularizer": null, "name": "GRU", "custom_name": "gru", "inner_activation": "hard_sigmoid", "go_backwards": false, "output_dim": 64, "trainable": true, "stateful": false, "cache_enabled": true, "init": "glorot_uniform", "inner_init": "orthogonal", "dropout_U": 0.0, "dropout_W": 0.0, "input_dim": 128, "return_sequences": true, "b_regularizer": null, "W_regularizer": null, "activation": "tanh", "input_length": null}, {"cache_enabled": true, "trainable": true, "name": "Dropout", "custom_name": "dropout", "p": 0.5}, {"U_regularizer": null, "name": "GRU", "custom_name": "gru", "inner_activation": "hard_sigmoid", "go_backwards": false, "output_dim": 16, "trainable": true, "stateful": false, "cache_enabled": true, "init": "glorot_uniform", "inner_init": "orthogonal", "dropout_U": 0.0, "dropout_W": 0.0, "input_dim": 64, "return_sequences": false, "b_regularizer": null, "W_regularizer": null, "activation": "tanh", "input_length": null}, {"cache_enabled": true, "trainable": true, "name": "Dropout", "custom_name": "dropout", "p": 0.2}, {"W_constraint": null, "b_constraint": null, "name": "Dense", "custom_name": "dense", "activity_regularizer": null, "trainable": true, "cache_enabled": true, "init": "glorot_uniform", "activation": "linear", "input_dim": null, "b_regularizer": null, "W_regularizer": null, "output_dim": 1}, {"cache_enabled": true, "activation": "tanh", "trainable": true, "name": "Activation", "custom_name": "activation"}], "loss": "binary_crossentropy", "optimizer": {"beta_1": 0.8999999761581421, "epsilon": 1e-08, "beta_2": 0.9990000128746033, "lr": 0.0010000000474974513, "name": "Adam"}, "name": "Sequential", "class_mode": "binary", "sample_weight_mode": null}
================================================================================
Model summary:
================================================================================
--------------------------------------------------------------------------------
Initial input shape: (None, 120002)
--------------------------------------------------------------------------------
Layer (name)                  Output Shape                  Param #             
--------------------------------------------------------------------------------
Embedding (embedding)         (None, None, 300)             36000600            
GRU (gru)                     (None, None, 128)             164736              
Dropout (dropout)             (None, None, 128)             0                   
GRU (gru)                     (None, None, 64)              37056               
Dropout (dropout)             (None, None, 64)              0                   
GRU (gru)                     (None, 16)                    3888                
Dropout (dropout)             (None, 16)                    0                   
Dense (dense)                 (None, 1)                     17                  
Activation (activation)       (None, 1)                     0                   
--------------------------------------------------------------------------------
Total params: 36206297
--------------------------------------------------------------------------------
================================================================================
Training history:
================================================================================
Epoch 1: loss: 0.592305, val_loss: 0.563325
Epoch 2: loss: 0.496083, val_loss: 0.486931
Epoch 3: loss: 0.477794, val_loss: 0.538668
Epoch 4: loss: 0.466370, val_loss: 0.473471
Epoch 5: loss: 0.465561, val_loss: 0.514353
================================================================================
Code file:
================================================================================
import cPickle as pickle
import numpy as np
import os
from os.path import join as path_join
import sys

from keras.layers.recurrent import GRU
from keras.models import Sequential
from keras.layers.core import Dense, Activation, Dropout

ROOT_PATH = '../..'
sys.path.append(ROOT_PATH)

from textclf.nn import train_neural
from textclf.nn.embeddings import make_embedding

MODEL_FILE = './models/3votes/cool/yelp-model-multi-rnn-1'
LOG_FILE = './outputs/3votes/cool/log-model-multi-rnn-1'

# Read back data
# train_reviews = np.load("../../Yelp_3votes_funny_train_fulltext_glove_300_X.npy")
# train_labels = np.load("../../Yelp_3votes_funny_train_fulltext_glove_300_y.npy")
# test_reviews = np.load("../../Yelp_3votes_funny_test_fulltext_glove_300_X.npy")
# test_labels = np.load("../../Yelp_3votes_funny_test_fulltext_glove_300_y.npy")

# train_reviews = np.load("../../Yelp_3votes_useful_train_fulltext_glove_300_X.npy")
# train_labels = np.load("../../Yelp_3votes_useful_train_fulltext_glove_300_y.npy")
# test_reviews = np.load("../../Yelp_3votes_useful_test_fulltext_glove_300_X.npy")
# test_labels = np.load("../../Yelp_3votes_useful_test_fulltext_glove_300_y.npy")

train_reviews = np.load("../../Yelp_3votes_cool_train_fulltext_glove_300_X.npy")
train_labels = np.load("../../Yelp_3votes_cool_train_fulltext_glove_300_y.npy")
test_reviews = np.load("../../Yelp_3votes_cool_test_fulltext_glove_300_X.npy")
test_labels = np.load("../../Yelp_3votes_cool_test_fulltext_glove_300_y.npy")

WV_FILE_GLOBAL = path_join(ROOT_PATH, 'embeddings/wv/glove.42B.300d.120000-glovebox.pkl')

gb_global = pickle.load(open(WV_FILE_GLOBAL, 'rb'))

wv_size = gb_global.W.shape[1]

model = Sequential()
model.add(make_embedding(vocab_size=gb_global.W.shape[0], init=gb_global.W, wv_size=wv_size,
                         fixed=True, constraint=None))
model.add(GRU(128, return_sequences=True))
model.add(Dropout(0.5))
model.add(GRU(64, return_sequences=True))
model.add(Dropout(0.5))
model.add(GRU(16))
model.add(Dropout(0.2))
model.add(Dense(1))
model.add(Activation('tanh'))

model.compile(loss='binary_crossentropy', optimizer='adam', class_mode="binary")

history = train_neural.train_sequential(model, train_reviews, train_labels, MODEL_FILE)
acc = train_neural.test_sequential(model, test_reviews, test_labels, MODEL_FILE)
train_neural.write_log(model, history, __file__, acc, LOG_FILE)

